#include <WiFi.h>
#include <PubSubClient.h>
#include <SPI.h>
#include <MFRC522.h>

// ======================== WiFi Configuration ========================
const char* ssid = "Aster Caffe";        // Ganti dengan nama WiFi Anda
const char* password = "americano";      // Ganti dengan password WiFi Anda

// ======================== MQTT Configuration ========================
const char* mqttServer = "192.168.1.100";  // Ganti dengan IP lokal broker MQTT
const int mqttPort = 1883;
const char* mqttUser = "";                 // Kosongkan jika tidak ada autentikasi
const char* mqttPassword = "";

WiFiClient espClient;
PubSubClient client(espClient);

// ======================== Pin Definitions ========================
const int PIR_PIN = 26;
const int TRIG_PIN_1 = 27;
const int ECHO_PIN_1 = 33;
const int TRIG_PIN_2 = 32;
const int ECHO_PIN_2 = 35;
const int RELAY_PIN = 25;

// ======================== RFID Configuration ========================
#define SS_PIN 21
#define RST_PIN 22
#define SCK_PIN 18
#define MOSI_PIN 23
#define MISO_PIN 19

MFRC522 rfid(SS_PIN, RST_PIN);

// ======================== System Variables ========================
int pirState = LOW;
int pirStatePrev = HIGH;
const int itemHeight = 10;
const int totalItems = 10;

// Daftar UID yang diizinkan (ganti sesuai kebutuhan)
byte authorizedUID[][4] = {
  {0x61, 0x77, 0xB3, 0x7B},
  {0x93, 0x04, 0x5D, 0x29}
};
const int authorizedUIDCount = 2;

// ======================== Function: WiFi ========================
void connectToWiFi() {
  Serial.print("Menghubungkan ke WiFi");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500); Serial.print(".");
  }
  Serial.println("\nTersambung ke WiFi");
}

// ======================== Function: MQTT ========================
void reconnectMQTT() {
  while (!client.connected()) {
    Serial.print("Menghubungkan ke MQTT...");
    if (client.connect("ESP32Client", mqttUser, mqttPassword)) {
      Serial.println("Terhubung!");
    } else {
      Serial.print("Gagal, status=");
      Serial.println(client.state());
      delay(2000);
    }
  }
}

// ======================== Function: Ultrasonic ========================
long measureDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW); delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duration = pulseIn(echoPin, HIGH, 30000);
  return (duration * 0.034) / 2;
}

// ======================== Setup ========================
void setup() {
  Serial.begin(115200);

  pinMode(PIR_PIN, INPUT);
  pinMode(TRIG_PIN_1, OUTPUT); pinMode(ECHO_PIN_1, INPUT);
  pinMode(TRIG_PIN_2, OUTPUT); pinMode(ECHO_PIN_2, INPUT);
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);

  SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, SS_PIN);
  rfid.PCD_Init();

  connectToWiFi();
  client.setServer(mqttServer, mqttPort);

  Serial.println("Scan kartu RFID untuk mulai...");
}

// ======================== Loop ========================
void loop() {
  if (!client.connected()) reconnectMQTT();
  client.loop();

  pirState = digitalRead(PIR_PIN);
  if (pirState == HIGH && pirStatePrev == LOW) {
    Serial.println("Gerakan terdeteksi!");
    client.publish("rak/pir", "Gerakan terdeteksi");
  }
  pirStatePrev = pirState;

  long distance1 = measureDistance(TRIG_PIN_1, ECHO_PIN_1);
  long distance2 = measureDistance(TRIG_PIN_2, ECHO_PIN_2);
  int itemsLeft1 = max(0L, totalItems - (distance1 / itemHeight));
  int itemsLeft2 = max(0L, totalItems - (distance2 / itemHeight));

  char payload[128];
  sprintf(payload, "{\"distance1\":%ld,\"items1\":%d,\"distance2\":%ld,\"items2\":%d}", distance1, itemsLeft1, distance2, itemsLeft2);
  client.publish("rak/status", payload);

  // RFID check
  if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
    Serial.print("UID kartu: ");
    for (byte i = 0; i < rfid.uid.size; i++) {
      Serial.print(rfid.uid.uidByte[i] < 0x10 ? " 0" : " ");
      Serial.print(rfid.uid.uidByte[i], HEX);
    }
    Serial.println();

    bool authorized = false;
    for (int j = 0; j < authorizedUIDCount; j++) {
      authorized = true;
      for (byte i = 0; i < 4; i++) {
        if (rfid.uid.uidByte[i] != authorizedUID[j][i]) {
          authorized = false;
          break;
        }
      }
      if (authorized) break;
    }

    if (authorized) {
      Serial.println("Kartu dikenali. Relay aktif.");
      client.publish("rak/akses", "Akses diterima");
      digitalWrite(RELAY_PIN, HIGH);
      delay(5000);
      digitalWrite(RELAY_PIN, LOW);
      Serial.println("Relay dimatikan.");
    } else {
      Serial.println("Kartu tidak dikenali.");
      client.publish("rak/akses", "Akses ditolak");
    }

    rfid.PICC_HaltA();
    rfid.PCD_StopCrypto1();
  }

  delay(1000);
}
